name: Java CD with Gradle in zzal community

on:
  workflow_dispatch:
  push:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## create application.yml
      - name: make application.properties
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.properties
        shell: bash
      - name: deliver application.properties
        run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
        shell: bash

      # 빌드 및 테스트 단계.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # push 하기 위해 로그인
      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      #도커 빌드 & 이미지 push
      - name: Docker build & Push
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKER_ID }}/zzalmyu .
          docker push ${{ secrets.DOCKER_ID }}/zzalmyu

    # Docker 파일을 EC2 서버에 배포
      - name: Deploy to Prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PEM_KEY }}
          port: 22
          script: |
            if [ ! -z "$(docker ps -q)" ]; then
              docker stop $(docker ps -q)
            fi

            if [ ! -z "$(docker ps -aq)" ]; then
              docker rm $(docker ps -aq)
            fi

            if [ ! -z "$(docker network ls -qf name=zzalmyu)" ]; then
              docker network rm zzalmyu
            fi

            docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
            
            docker pull ${{ secrets.DOCKER_ID }}/zzalmyu

            docker network create zzalmyu
            
            docker run -d \
              --name zzalmyu \
              --network=zzalmyu \
              -p 8080:8080 \
              -e TZ=Asia/Seoul \
              ${{ secrets.DOCKER_ID }}/zzalmyu

            docker pull redis

            docker run -d \
              --name zzal-redis \
              --network=zzalmyu \
              -p 6379:6379 \
              redis

            docker system prune -f

            
